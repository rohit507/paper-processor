# HLint configuration file
# https://github.com/ndmitchell/hlint
##########################

# This file contains a template configuration file, which is typically
# placed as .hlint.yaml in the root of your project


# Specify additional command line arguments
#
# - arguments: [--color, --cpp-simple, -XQuasiQuotes]


# Control which extensions/flags/modules/functions can be used
#
- extensions:
  - name: # only these listed extensions can be used
    - NoImplicitPrelude
    - ApplicativeDo
    - BangPatterns
    - ConstraintKinds
    - DataKinds
    - DefaultSignatures
    - DeriveDataTypeable
    - DeriveFoldable
    - DeriveFunctor
    - DeriveGeneric
    - DeriveLift
    - DeriveTraversable
    - DerivingStrategies
    - DuplicateRecordFields
    - EmptyCase
    - EmptyDataDecls
    - ExistentialQuantification
    - ExtendedDefaultRules
    - FlexibleContexts
    - FlexibleInstances
    - FunctionalDependencies
    - GADTs
    - GeneralizedNewtypeDeriving
    - ImplicitParams
    - InstanceSigs
    - KindSignatures
    - LambdaCase
    - MultiParamTypeClasses
    - MultiWayIf
    - NamedFieldPuns
    - NoImplicitPrelude
    - NoMonomorphismRestriction
    - OverloadedLabels
    - OverloadedLists
    - OverloadedStrings
    - PackageImports
    - PatternSynonyms
    - PolyKinds
    - QuasiQuotes
    - QuantifiedConstraints
    - RankNTypes
    - RecordWildCards
    - RecursiveDo
    - ScopedTypeVariables
    - StandaloneDeriving
    - TemplateHaskell
    - TupleSections
    - TypeApplications
    - TypeFamilies
    - TypeFamilyDependencies
    - TypeOperators
    - ViewPatterns
#
# - flags:
#   - {name: -w, within: []} # -w is allowed nowhere
#
# - modules:
#   - {name: [Data.Set, Data.HashSet], as: Set} # if you import Data.Set qualified, it must be as 'Set'
#   - {name: Control.Arrow, within: []} # Certain modules are banned entirely
#
# - functions:
#   - {name: unsafePerformIO, within: []} # unsafePerformIO can only appear in no modules


# Add custom hints for this project
#
# Will suggest replacing "wibbleMany [myvar]" with "wibbleOne myvar"
# - error: {lhs: "wibbleMany [x]", rhs: wibbleOne x}


# Turn on hints that are off by default
#
# Ban "module X(module X) where", to require a real export list
# - warn: {name: Use explicit module export list}
#
# Replace a $ b $ c with a . b $ c
# - group: {name: dollar, enabled: true}
#
# Generalise map to fmap, ++ to <>
# - group: {name: generalise, enabled: true}


# Ignore some builtin hints
# - ignore: {name: Use let}
# - ignore: {name: Use const, within: SpecialModule} # Only within certain modules


# Define some custom infix operators
# - fixity: infixr 3 ~^#^~


# To generate a suitable file for HLint do:
# $ hlint --default > .hlint.yaml
